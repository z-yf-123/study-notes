1.Web API
    Web API主要是针对于浏览器提供的接口，主要针对于浏览器做交互效果。
    Web API一般都有输入和输出(函数的传参和返回值)，WebAPI很多都是方法(函数)
2.什么是DOM
    文档对象模型,是W3C组织推荐的处理可扩展标记语言的标准编程接口。
    W3C已经定义了一系列的DOM接口，通过这些DOM接口可以改变网页的内容、结构和样式。
3.什么是BOM
    BOM即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window.
4.this指向
   关键点：this并不是定义的时候确定的,而是在函数执行的时候确定的
   √全局作用域或者普通函数中this指向window
   √定时器中的this也指向windiow
   √在对象的方法中，this 指向调用该方法的对象
   √构造函数中的this指向构造函数的实例对象
   √apply和call中的this指向第一个参数中的对象(若参数为空，默认指向window)
   √在箭头函数中，this指向外层作用域的this。
5.同步、异步以及js执行机制
    √Javascript语言的执行环境是"单线程","单线程"就是指同一时间点是能做一件事。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务。
    √单线程的坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行
    √为了解决这个问题，Javascript语言将任务的执行模式分成两种:同步和异步，异步就可以把耗时较长的任务放一边，等所有耗时较短的任务完成后再执行
    √异步可以简单地理解为：可以改变程序正常执行顺序的操作就可以看成是异步操作
    √具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）
    （1）所有同步任务都在主线程上执行，形成一个执行栈
    （2）主线程之外，还存在一个"任务队列"。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件。
    （3）一旦执行栈中的所有同步任务执行完毕，系统就会读取"任务队列"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。
    （4）主线程不断重复上面的第三步
    √主线程从"任务队列"中读取事件,这个过程是循环不断的,所以整个的这种运行机制又称为事件循环。
